name: Build releases

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Select the build version'
        required: true
        default: 'release'
        type: choice
        options:
          - 'release'
          - 'snapshot-24.10'
      ccache:
        description: 'Enable ccache (Use Cache to speed up next build)'
        type: boolean
        default: true
      lan_addr:
        description: 'Setting default LAN address'
        required: true
        default: '10.0.0.1'
        type: string
      build_options:
        description: 'Build options (separate multiple options with spaces)'
        required: false
        default: 'BUILD_FAST=y ENABLE_BPF=y ENABLE_LTO=y ENABLE_LRNG=y ENABLE_MOLD=y KERNEL_CLANG_LTO=y ENABLE_OTA=y'
        type: string

jobs:
  build:
    name: Build ${{ matrix.device }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        device:
          - 'armv8'
          - 'nanopi-r4s'
          - 'nanopi-r5s'
          - 'netgear_r8500'
          - 'x86_64'
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      continue-on-error: true
      uses: actions/checkout@main
      with:
        path: OpenWrt-Action

    - name: Setup variables
      run: |
        sudo timedatectl set-timezone 'Asia/Shanghai'
        git config --global user.name 'actions'
        git config --global user.email 'action@github.com'
        echo build_dir="/builder" >> "$GITHUB_ENV"
        [ "${{ github.event.inputs.version }}" = release ] && echo build_version="rc2" >> "$GITHUB_ENV" || echo build_version="dev" >> "$GITHUB_ENV"

    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

    - name: Install Caddy Server
      run: |
        sudo curl -sL -o /usr/bin/caddy https://github.com/sbwml/r4s_build_script/releases/download/caddy/caddy
        sudo chmod 755 /usr/bin/caddy
        echo ":8080 {" > caddyfile
        echo "    root * $(pwd)/OpenWrt-Action" >> caddyfile
        echo "    file_server browse" >> caddyfile
        echo "}" >> caddyfile
        sudo /usr/bin/caddy start --config caddyfile --adapter caddyfile

    - name: Free disk space
      uses: oppen321/actions@free-disk
      with:
        build-mount-path: /builder

    - name: Build System Setup
      uses: oppen321/actions@openwrt-build-setup

    - name: Install LLVM
      uses: oppen321/actions@install-llvm

    - name: Restore Cached
      if: ${{ github.event.inputs.ccache == 'true' && matrix.device != 'armv8' && matrix.device != 'nanopi-r4s' }}
      uses: actions/cache/restore@v4
      with:
        path: /builder/.ccache
        key: openwrt-24.10-${{ matrix.device }}-ccache

    - name: Restore Cached (releases)
      if: ${{ github.event.inputs.ccache == 'true' && matrix.device == 'armv8' || matrix.device == 'nanopi-r4s' }}
      continue-on-error: true
      working-directory: /builder
      run: |
        curl -s https://api.github.com/repos/${{ github.repository }}/releases | grep 'browser_download_url' | grep ccache | grep ${{ matrix.device }} | awk -F '"' '{print $4}' | grep -v '^$' | xargs -n 1 wget -q
        cat ${{ matrix.device }}.tar.* | tar -xf - || true
        rm -rf ${{ matrix.device }}.tar.* || true
        [ -d .ccache ] && cache_size=$(du -sb .ccache | awk '{print $1}') || cache_size=0
        cache_size_mb=$(echo "scale=0; ${cache_size} / (1024 * 1024)" | bc)
        echo "Cache Size: ~${cache_size_mb} MB (${cache_size} B)"
        echo "Cache restored successfully"
        echo "Cache restored from key: ${{ matrix.device }}"

    - name: Compile OpenWrt
      working-directory: /builder
      id: compile
      continue-on-error: true
      run: |
        export ${{ github.event.inputs.build_options }} LAN=${{ github.event.inputs.lan_addr }} USE_GCC15=y
        [ ${{ github.event.inputs.ccache }} = 'true' ] && export ENABLE_CCACHE=y
        bash <(curl -sS http://127.0.0.1:8080/build.sh) ${{ env.build_version }} ${{ matrix.device }}
        cd openwrt
        if [ "${{ github.event.inputs.version }}" = release ]; then
          tags=OpenWrt-$(git describe --abbrev=0 --tags)
        else
          tags=snapshot-24.10-$(git log -n 1 --date=format:"%Y%m%d" --format="%cd")-$(git log --pretty=format:"%h" -1)
        fi
        echo "latest_release=$tags" >>$GITHUB_ENV

    - name: Extensive logs after a failed compilation
      working-directory: /builder
      if: steps.compile.outcome == 'failure'
      run: |
        cd openwrt
        make V=s

    - name: Delete Cached
      if: ${{ github.event.inputs.ccache == 'true' && matrix.device != 'armv8' && matrix.device != 'nanopi-r4s' }}
      continue-on-error: true
      working-directory: /builder
      env:
        GH_TOKEN: ${{ secrets.TOKEN_OPPEN321 }}
        GH_REPO: ${{ github.repository }}
      run: |
        gh cache delete openwrt-24.10-${{ matrix.device }}-ccache || true

    - name: Save Cached
      if: ${{ github.event.inputs.ccache == 'true' && matrix.device != 'armv8' && matrix.device != 'nanopi-r4s' }}
      continue-on-error: true
      uses: actions/cache/save@v4
      with:
        path: /builder/.ccache
        key: openwrt-24.10-${{ matrix.device }}-ccache

    - name: Create ccache tar files
      if: ${{ github.event.inputs.ccache == 'true' && matrix.device == 'armv8' || matrix.device == 'nanopi-r4s' }}
      continue-on-error: true
      working-directory: /builder
      run: |
        mkdir -p ccache
        tar cf - .ccache | split -d -b 1800m - ccache/${{ matrix.device }}.tar.

    - name: Upload Cached (releases - ccache)
      if: ${{ github.event.inputs.ccache == 'true' && matrix.device == 'armv8' || matrix.device == 'nanopi-r4s' }}
      continue-on-error: true
      uses: ncipollo/release-action@v1.14.0
      with:
        name: ccache
        allowUpdates: true
        tag: ccache
        commit: master
        replacesArtifacts: true
        prerelease: true
        token: ${{ secrets.TOKEN_OPPEN321 }}
        artifacts: |
          ${{ env.build_dir }}/ccache/*

    - name: Prepare Firmware Files
      working-directory: /builder
      run: |
        mkdir -p rom info
        if [ "${{ matrix.device }}" = "nanopi-r4s" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*-r4s.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        elif [ "${{ matrix.device }}" = "nanopi-r5s" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        elif [ "${{ matrix.device }}" = "x86_64" ]; then
          cp -a openwrt/bin/targets/x86/*/*-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-generic-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-x86-64-generic.manifest info/manifest.txt
          cp -a openwrt/bin/targets/x86/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        elif [ "${{ matrix.device }}" = "netgear_r8500" ]; then
          cp -a openwrt/bin/targets/bcm53xx/generic/*-bcm53xx-generic-netgear_r8500-squashfs.chk rom/
          cp -a openwrt/bin/targets/bcm53xx/generic/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/bcm53xx/generic/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        elif [ "${{ matrix.device }}" = "armv8" ]; then
          tar zcf rom/u-boot-qemu_armv8.tar.gz -C openwrt/bin/targets/armsr/armv8*/ ./u-boot-qemu_armv8
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-initramfs-kernel.bin rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-kernel.bin rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-generic-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/armsr/armv8*/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/armsr/armv8*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum * > ../info/sha256sums.txt
        fi
        cd ..
        tar zcf rom/buildinfo_${{ matrix.device }}.tar.gz info

    - name: Create virtual machine images
      if: ${{ matrix.device == 'x86_64' }}
      working-directory: /builder
      run: |
        mkdir -p virtual_images
        cp -a openwrt/bin/targets/x86/*/*-generic-squashfs-combined-efi.img.gz virtual_images/
        gzip -dq virtual_images/*-generic-squashfs-combined-efi.img.gz || true
        cd virtual_images
        image_name=$(basename -s .img *.img)
        qemu-img convert -f raw -O qcow2 *.img $image_name.qcow2
        qemu-img convert -f raw -O vpc *.img $image_name.vhd
        qemu-img convert -f raw -O vmdk *.img $image_name.vmdk
        rm -f *.img
        sha256sum * > sha256sums.txt
        echo "<center><h1>x86_64 虚拟机平台镜像</h1></center>" > README.md      

    - name: Create release
      uses: ncipollo/release-action@v1.14.0
      with:
        name: OpenWrt-v24.10.0-rc4
        allowUpdates: true
        tag: v24.10.0-rc4
        commit: openwrt-24.10
        replacesArtifacts: true
        token: ${{ secrets.TOKEN_OPPEN321 }}
        artifacts: |
          ${{ env.build_dir }}/rom/*

    - name: Upload OTA Info
      if: github.event.inputs.version == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: ota-${{ matrix.device }}
        path: ${{ env.build_dir }}/openwrt/ota/fw.json
        retention-days: 1        

  merge-ota:
    needs: build  # 等待所有构建任务完成
    if: github.event.inputs.version == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Download all OTA files
        uses: actions/download-artifact@v4
        with:
          path: ota_files
          pattern: ota-*
          merge-multiple: true

      - name: Merge OTA Info
        run: |
          mkdir -p merged
          
          # 创建初始 JSON 结构
          echo "{}" > merged/ota.json
          
          # 处理每个设备的 fw.json
          for file in ota_files/*/fw.json; do
            if [ -f "$file" ]; then
              echo "Processing: $file"
              
              # 使用 jq 合并，保留数组内容
              jq -s '
                def merge:
                  reduce .[] as $item (
                    {},
                    . * $item
                  );
                merge
              ' merged/ota.json "$file" > merged/temp.json
              
              mv merged/temp.json merged/ota.json
            fi
          done
          
          # 确保所有设备都有数组
          jq '
            . * {
              "netgear,r8500": (."netgear,r8500" // []),
              "friendlyarm,nanopi-r4s": (."friendlyarm,nanopi-r4s" // []),
              "friendlyarm,nanopi-r5c": (."friendlyarm,nanopi-r5c" // []),
              "friendlyarm,nanopi-r5s": (."friendlyarm,nanopi-r5s" // []),
              "x86_64": (."x86_64" // []),
              "armsr,armv8": (."armsr,armv8" // [])
            }
          ' merged/ota.json > merged/temp.json
          
          # 格式化并排序
          jq -S . merged/temp.json > merged/ota.json

      - name: Deploy OTA to Gitea
        run: |
          cd merged
          git init
          git config user.name "Gitea Action"
          git config user.email "action@gitea.com"
          git add .
          git commit -m "Update OTA information"
          git branch -M main
          git push -f https://zhao:${{ secrets.GITEA_PASSWORD }}@git.kejizero.online/zhao/OTA.git main
